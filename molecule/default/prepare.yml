---

- name: Prepare
  hosts: molecule_hosts
  gather_facts: yes
  tasks:
    - name: Wait for connection
      wait_for_connection:

    - name: Install AD
      win_feature:
        name: AD-Domain-Services
        include_management_tools: yes
        include_sub_features: yes
        state: present
      register: ad_install_result
      until: ad_install_result is not failed
      retries: 30
      delay: 60

    - name: Ensure the RSAT-AD-PowerShell feature is installed
      win_feature:
        name:
          - RSAT-AD-PowerShell
        state: present
      register: ad_feature_result
      # failed_when: no # HACK Fails in windows 10

    - name: Install domain
      win_domain:
        dns_domain_name: '{{ test_domain_name }}'
        safe_mode_password: '{{ test_safe_mode_password }}'
      register: domain_install_result
      until: domain_install_result is successful
      retries: 30
      delay: 15

    - name: Reboot server
      win_reboot:
        msg: "Installing AD. Rebooting..."
        pre_reboot_delay: 15
      when: >-
        ad_install_result.reboot_required
        or ad_feature_result.reboot_required
        or domain_install_result is changed
      tags:
        - skip_ansible_lint

    - name: Wait for connection
      wait_for_connection:

    - name: Win ping
      win_ping:

    - name: Check Active Directoy Web Services
      win_shell: |-
        $test = Try { Get-AdDomain } Catch { $null }
        If ($test) { "OK" } else { "Failed" }
      register: check_adws_result
      failed_when: "'Failed' in check_adws_result.stdout"
      until: "'OK' in check_adws_result.stdout"
      retries: 30
      delay: 60

    - name: Create OU
      win_shell: |-
        $ou = Try {
          Get-ADOrganizationalUnit `
            -Identity "{{ test_ou }}"
        } Catch { $null }
        If (-Not $ou) {
          New-ADOrganizationalUnit `
            -Name "{{ test_ou_name }}" `
            -Path "{{ test_ou_base }}"
          "changed"
        }
      register: ou_creation_result
      changed_when: "'changed' in ou_creation_result.stdout"
      failed_when: >-
        'Unable to find a default server with Active Directory Web Services
        running' in ou_creation_result.stdout
      until: ou_creation_result is successful
      retries: 30
      delay: 15

    - name: Erasing and recreating groups, prevent ACL weirdness
      win_shell: |-
        $groups = '{{ test_group[0] }}',
                  '{{ test_group[1] }}',
                  '{{ test_group[2] }}',
                  '{{ test_group[3] }}',
                  '{{ test_group[4] }}',
                  '{{ test_group[5] }}',
                  '{{ test_group[6] }}',
                  '{{ test_group[7] }}',
                  '{{ test_manager }}'
        ForEach ($group in $groups) {
          $ou = '{{ test_ou }}'
          Get-ADGroup $group |
            Remove-ADGroup -Confirm:$False -ErrorAction:Ignore
          New-ADGroup $group `
            -Path $ou `
            -GroupCategory Security `
            -GroupScope Global
        }

    - name: Add and enable manager in chosen groups
      loop:
        - "{{ test_group[1] }}"
        - "{{ test_group[4] }}"
        - "{{ test_group[5] }}"
      loop_control:
        loop_var: group
      win_domain_groups_managedby:
        group: "{{ group }}"
        manager: "{{ test_manager }}"
        manage_enabled: yes
        domain_server: "{{ test_domain_server }}"
        state: present
